; #############################################################################################################################

    #include "..\Source\SharXtra.h"

; #############################################################################################################################

    CODE

; #############################################################################################################################



; #############################################################################################################################

    DATA

    _gs_sSH         dss "2nd Hand", 0

    _gs_hInst       dd 00420000h
    _gs_vMem        dd ?

; #############################################################################################################################

    CODE

; #############################################################################################################################

    align   4

    @MemZero@8: ; void ( ecx : DWORD s_dSize, edx : void *s_vDest );
    ;{
        push    edi
        mov     edi, edx
        xor     eax, eax

        cld
        rep     stosd

        pop     edi
        ret
    ;}

; #############################################################################################################################

    align   4

    @MemCopy@12: ; void ( ecx : DWORD s_dSize, edx : void *s_vDest, void *s_vSrc );
    ;{
        push    edi, esi
        mov     edi, edx
        mov     esi, [ esp + 0Ch ]

        cld
        rep     movsd

        pop     esi, edi
        retn    4
    ;}

; #############################################################################################################################

    align   4

    @NRandom@8: ; DWORD ( ecx : DWORD *s_dRNG, edx : DWORD s_dBase );
    ;{
        xor     eax, eax
        or      edx, edx
        jz      >.NR_X

        push    edx
        push    ecx

        mov     eax, [ ecx ]
        test    eax, 80000000h
        jz      >.NR_S
        add     eax, 7fffffffh

.NR_S:  xor     edx, edx
        mov     ecx, 1F31Dh
        div     ecx
        mov     ecx, eax
        mov     eax, 41A7h
        mul     edx
        mov     edx, ecx
        mov     ecx, eax
        mov     eax, 0B14h
        mul     edx
        sub     ecx, eax

        pop     edx
        mov     eax, ecx
        mov     [ edx ], ecx

        xor     edx, edx
        pop     ecx
        div     ecx

        mov     eax, edx
.NR_X:  ret
    ;}

; #############################################################################################################################

    align   4

    @MemAlloc@4: ; DWORD * ( ecx : DWORD s_dSize );
    ;{
        shl     ecx, 2
        mov     eax, [ _gs_vMem ]
        push    ecx
        push    eax
        mov     eax, [ eax ]
        call    D[ eax + 12 ]
        ret
    ;}

; #############################################################################################################################

    align   4

    @MemFree@4: ; void ( ecx : void *s_vDest );
    ;{
        mov     eax, [ _gs_vMem ]
        push    ecx
        push    eax
        mov     eax, [ eax ]
        call    D[ eax + 20 ]
        ret
    ;}

; #############################################################################################################################
